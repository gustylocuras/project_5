{"version":3,"sources":["components/map.js","components/countries.js","components/spheres.js","components/query.js","components/footer.js","components/nav.js","App.js","connection.js","serviceWorker.js","index.js"],"names":["Map","geojson","property","useEffect","svg","d3","minProp","features","feature","properties","maxProp","colorScale","domain","range","projection","pathGenerator","selectAll","data","join","attr","transition","className","style","height","width","Countries","useState","setProperty","value","onChange","event","target","circleSize","Spheres","state","countries","props","circles","circleRadiusScale","this","casesMinMax","d","cases","deathsMinMax","deaths","console","log","force","sort","a","b","enter","append","call","on","active","alphaTarget","restart","fx","x","fy","y","html","country","todayCases","todayDeaths","tests","nodes","strength","Math","pow","iterations","Component","Query","COUNTRIES_QUERY","gql","useQuery","errorPolicy","loading","error","Fragment","Footer","Nav","App","render","React","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","Boolean","window","location","hostname","match","ReactDOM","client","connection","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1575ca22.chunk.js","sourcesContent":["import React, {  useEffect } from 'react';\nimport * as d3 from 'd3';\n\n\n\n\nfunction Map ({ geojson, property}) {\n\n\n\n  useEffect(() => {\n      const svg = d3.select('svg')\n      const minProp = d3.min(geojson.features, (feature) => feature.properties[property])\n      const maxProp = d3.max(geojson.features, (feature) => feature.properties[property])\n      const colorScale = d3.scaleLinear()\n                          .domain([minProp, maxProp])\n                          .range([\"#ccc\", \"red\"])\n\n\n      const projection = d3.geoMercator()\n\n      const pathGenerator = d3.geoPath().projection(projection)\n\n\n      svg\n          .selectAll(\".country\")\n          .data(geojson.features)\n          .join(\"path\")\n          .attr(\"class\", \"country\")\n          .transition()\n          .attr(\"fill\", feature => colorScale(feature.properties[property]))\n          .attr(\"d\", (feature) => pathGenerator(feature))\n\n\n\n    }, [geojson,  property]);\n\n\n\n      return(\n          <div className=\"map\">\n            <svg className=\"svg-map\" style={{height: \"500px\", width: \"960px\"}} ></svg>\n\n          </div>\n        )\n\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default Map;\n","import React, { useState } from 'react';\n// import { useQuery } from '@apollo/react-hooks';\n// import gql from 'graphql-tag';\nimport Map from './map'\nimport geojson from './custom.json'\n\n\n\n//Component Query\nfunction Countries() {\n\nconst [property, setProperty] = useState(\"pop_est\")\n\n      return(\n        <div className=\"map\">\n          <Map  geojson={geojson} property={property} />\n            <select value={property} onChange={event => setProperty(event.target.value)}>\n              <option value=\"pop_est\">Population</option>\n              <option value=\"name_len\">name length</option>\n              <option value=\"gdp_md_est\">GDP</option>\n          </select>\n        </div>\n      )\n\n    }\n\n\n\n\n// }\n\n\nexport default Countries;\n","import React, { Component } from 'react'\nimport * as d3 from \"d3\";\n\nconst width = 580\nconst height = 550\nconst forceStrength = 0.12\n\n\nconst circleSize = { min: 6, max: 80 };\n\nclass Spheres extends Component {\n\n  state = {\n    countries:this.props.data.countries,\n    circles: []\n  };\n\n  circleRadiusScale = d3.scaleSqrt().range([circleSize.min, circleSize.max]);\n\n  \n  colorScale = d3.scaleSequential(d3.interpolateReds)\n\n            // .nodes(this.state.circles)\n            // .force(\"x\", d3.forceX(width / 2))\n            // .force(\"y\", d3.forceY(height / 2))\n            //\n            // .on(\"tick\", function() {\n            //   this.state.circles.map((circle) => {\n            //     circle.attr(\"cx\", function(d){ return d.x })\n            //           .attr(\"cy\", function(d){ return d.y })\n            //   })\n            // })\n            // this.setState({circles: circles})\n\n  componentDidMount(){\n    let { countries } = this.state\n\n    const casesMinMax = d3.extent(countries, (d) => { return d.cases})\n    const deathsMinMax = d3.extent(countries, (d) => { return d.deaths})\n    console.log(deathsMinMax, casesMinMax);\n\n    //update scales with domain\n    this.circleRadiusScale.domain(casesMinMax)\n    this.colorScale.domain(deathsMinMax)\n\n    const chart = d3.select('.chart')\n        .attr('width', width)\n        .attr('height', height);\n\n\n\n    const force = d3.forceSimulation()\n                    .force('center', d3.forceCenter(width / 2, height / 2))\n                    .force(\"y\", d3.forceY())\n                    .force(\"x\", d3.forceX())\n\n\n                    countries = countries.sort((a, b) =>\n                      b.cases - a.cases\n                    )\n                    const dragStart = d => {\n                      if (!d3.event.active) force.alphaTarget(1).restart()\n                      d.fx = d.x;\n                      d.fy = d.y;\n                    };\n                    const drag = d => {\n                      d.fx = d3.event.x;\n                      d.fy = d3.event.y;\n                    };\n                    const dragEnd = d => {\n                      if (!d3.event.active) force.alphaTarget(0.8);\n                      d.fx = null;\n                      d.fy = null;\n                    }\n\n                    const showInfo = d => {\n                      d3.select(\".title\").html(d.country)\n                      d3.select(\".cases\").html(\"Cases: \" + d.cases)\n                      d3.select(\".deaths\").html(\"Deaths: \" + d.deaths)\n                      d3.select(\".todayCases\").html(\"Today's Cases: \" + d.todayCases)\n                      d3.select(\".todayDeaths\").html(\"Today's Deaths: \" + d.todayDeaths)\n                      d3.select(\".tests\").html(\"Tests: \" + d.tests)\n\n                    }\n                    const circles = d3.select('.chart')\n                        .selectAll('circle')\n                        .data(countries).enter()\n                        .append('circle')\n                        .attr(\"r\", d => { return this.circleRadiusScale(d.cases)})\n                        .attr(\"fill\", d => { return this.colorScale(d.deaths)})\n                        .attr(\"stroke\", \"red\" )\n                        .call(d3.drag()\n                         .on('start', dragStart)\n                         .on('drag', drag)\n                         .on('end', dragEnd))\n                         .on('mouseover',showInfo)\n\n\n                    const ticked = () => {\n                      circles\n                      .attr(\"cx\", function(d) { return d.x ; })\n                      .attr(\"cy\", function(d) { return d.y ; })\n\n                        };\n\n\n                    //Starting simulation\n                      force.nodes(countries)\n                        .force(\"charge\", d3.forceManyBody().strength((d) => {\n                          return -Math.pow(this.circleRadiusScale(d.cases), 2) * forceStrength;\n                        }))\n                      .force('collide', d3.forceCollide().strength(0.5).iterations(5))\n                        .on('tick', ticked)\n\n\n                    // = countries.map((d) => {\n                    //   const countryCircleRadius = this.circleRadiusScale(d.cases)\n                    //   const countryCircleColor = this.colorScale(d.deaths)\n                    //   return {\n                    //     r: countryCircleRadius,\n                    //     color: countryCircleColor\n                    //   }\n                    // })\n}\n\n\n  render() {\n\n\n    return(\n      <div className='container'>\n        <div className='chartContainer'>\n          <svg className='chart'>\n          </svg>\n          <div className=\"tooltip\">\n            <h1 className=\"title\">Country name</h1>\n            <div className=\"data\">\n            <h3 className=\"cases\">Cases</h3>\n            <h3 className=\"deaths\">Deaths</h3>\n            <h3 className=\"todayCases\">Today's cases</h3>\n            <h3 className=\"todayDeaths\">Today's deaths</h3>\n            <h3 className=\"tests\">Tests</h3>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n\n    )\n\n  }\n\n}\n\nexport default Spheres;\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport Spheres from './spheres'\n\nfunction Query(){\n  const COUNTRIES_QUERY = gql`\n    query countriesQuery {\n      countries {\n        country\n        countryInfo{\n          lat\n          long\n        }\n        cases\n        todayCases\n        deaths\n        todayDeaths\n        recovered\n        todayRecovered\n        active\n        critical\n        tests\n        activePerOneMillion\n        recoveredPerOneMillion\n\n      }\n    }\n\n    `;\n    const { loading, error, data } = useQuery(COUNTRIES_QUERY, { errorPolicy: 'all' });\n\n    if (loading) return 'Loading...';\n    // if (error) console.log(error); return `Error! ${error}`;\n    if(data) console.log(data);\n\nreturn(\n  <React.Fragment>\n    <Spheres data={data} />\n\n\n\n\n\n  </React.Fragment>\n)\n\n}\n\n\n\n\nexport default Query;\n","import React from 'react'\n\nfunction Footer(){\n  return(\n    <footer>\n      <h1>By Agustin Alvarez </h1>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React from 'react'\n\nfunction Nav(){\n  return(\n    <nav>\n      <h1>Covid-19 daily</h1>\n    </nav>\n  )\n}\n\nexport default Nav;\n","import React from 'react';\n// import Spheres from './components/spheres'\nimport Countries from './components/countries'\nimport Query from './components/query'\nimport Footer from './components/footer'\nimport Nav from './components/nav'\n\n\nclass App extends React.Component {\n  render = () => {\n    return(\n      <div className=\"container\">\n        <Nav />\n        <Countries />\n        <Query />\n        <Footer />\n\n\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nexport default new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"/graphql\"\n  })\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport connection from './connection'\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\n\nReactDOM.render(\n  <ApolloProvider client={connection}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}